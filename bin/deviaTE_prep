#!/usr/bin/env python3

import sys
import argparse
import subprocess
from pkg_resources import resource_stream
import deviaTE.deviaTE_IO as IO


parser = argparse.ArgumentParser()
parser.add_argument('--input', required=True)
parser.add_argument('--library')
parser.add_argument('--qual_threshold', default='15')
parser.add_argument('--min_read_length', default='1')
parser.add_argument('--min_alignment_length', default='1')
parser.add_argument('--threads', default='1')
parser.add_argument('--quality_encoding', default='sanger')
args = parser.parse_args()

# set resource file names and tmp files
if args.library is None:
    args.library = IO.get_data('lib/te_library')


log = args.input + '.log'
trimmed = args.input + '.trim.tmp'
mapped = args.input + '.sam.tmp'
filtered = args.input + '.filt.tmp'
fused = args.input + '.fused'

print('Starting preparation of ' + args.input)

# trimming
trimming = ['deviaTE_trim.pl', '--input1', args.input, '--output', trimmed,
            '--quality-threshold', args.qual_threshold, '--min-length', args.min_read_length,
            '--fastq-type', args.quality_encoding]
IO.execute(command=' '.join(trimming))

# count total read length for normalization
trl = IO.count_total_read_len(trimmed)
with open(log, 'w') as l:
    m = '#total_read_length: ' + str(trl) + '\n'
    l.write(m)

# # index reference
# index = ['bwa', 'index', args.library]
# IO.execute(command=' '.join(index))

# mapping
mapping = ['bwa', 'bwasw', '-M', '-t', args.threads, args.library, trimmed]
IO.map_bwa(command=' '.join(mapping), outfile=mapped)

# filtering
filtering = ['samtools', 'view', '-h', mapped, '-o', 'tmp', '-@', args.threads,
             '-F', '0x4', '-F 0x400', '-F', '0x200']
IO.execute(command=' '.join(filtering))

if args.min_alignment_length != '1':
    IO.filter_alignment_length(inp='tmp', outp=filtered, lim=args.min_alignment_length)
else:
    mv = ['mv', 'tmp', filtered]
    IO.execute(command=' '.join(mv))

# fusing
fusing = ['deviaTE_fuse', '--input', filtered, '--output', fused] # no skip
# fusing = ['mv', filtered, fused]  # for skipping fusing
IO.execute(command=' '.join(fusing))

# # this part is only to skip fusing
# bam = ['samtools', 'view', '-b', fused, '-o', fused + '.bam']
# sort = ['samtools', 'sort', fused + '.bam', '-o', fused + '.sort.bam']
# index = ['samtools', 'index', fused + '.sort.bam', fused + '.sort.bam.bai']

# subprocess.run(' '.join(bam), shell=True)
# subprocess.run(' '.join(sort), shell=True)
# subprocess.run(' '.join(index), shell=True)
# ---------


# clean-up
cleaning = ['rm', trimmed, filtered, mapped, trimmed + '.params']
IO.execute(command=' '.join(cleaning))

print('finished preparation')


