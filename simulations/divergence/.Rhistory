theme(legend.position = 'bottom')
legend <- get_legend(leg)
combo <- ggdraw(plot_grid(ggplot(), legend, ncol=1, nrow=2, rel_heights = c(0.01,0.99)))
pdf(file=paste("~/Desktop/vetgrid/consensus_te/10_droseu_unrooted_tree/droseu_long_legend.pdf", sep=""), height=3, width=3)
print(combo)
dev.off()
#print a separate color legend
leg <- ggplot() +
geom_point(data=meta, aes(x=Altitude, y=Longitude, color=Latitude)) +
scale_colour_gradient(low="lightpink", high="darkdarkred") +
theme_minimal(base_size=10) +
theme(legend.position = 'right')
#print a separate color legend
leg <- ggplot() +
geom_point(data=meta, aes(x=Altitude, y=Longitude, color=Latitude)) +
scale_colour_gradient(low="lightpink", high="darkred") +
theme_minimal(base_size=10) +
theme(legend.position = 'right')
leg
legend <- get_legend(leg)
legend
combo <- ggdraw(plot_grid(ggplot(), legend, ncol=1, nrow=2, rel_heights = c(0.01,0.99)))
combo
combo <- ggdraw(plot_grid(ggplot(), legend, ncol=1, nrow=2, rel_heights = c(0.01,0.99)))
pdf(file=paste("~/Desktop/vetgrid/consensus_te/11_na_unrooted_tree/na_lat_legend.pdf", sep=""), height=3, width=3)
print(combo)
dev.off()
library(ape)
library(dendextend)
library(ggplot2)
library(ggdendro)
inp <- '/Users/lweilguny/Desktop/vetgrid/consensus_te/14_modeltree/matrix.D'
distmat <- read.delim(inp, sep=' ', row.names=1, header=T)
str(distmat)
distmat <- as.dist(distmat, diag=TRUE, upper=TRUE)
str(distmat)
# bionj tree
tree <- bionj(distmat)
tree
plot(tree)
tree$tip.label <- as.character(c("deme 1", "deme 2", "deme 3"))
plot(tree)
tree <- root(tree, outgroup = 'deme 1')
plot(tree)
cons <- c("deme 1", "deme 2", "deme 3")
dend <- rotateConstr(dend, constraint = rev(cons))
dend <- rotateConstr(tree, constraint = rev(cons))
tree <- rotateConstr(tree, constraint = rev(cons))
plot(tree)
# or cluster
hcl <- hclust(distmat, method='average')
tree <- as.phylo(hcl)
tree$tip.label <- as.character(c("deme 1", "deme 2", "deme 3"))
tree <- root(tree, outgroup = 'deme 1')
cons <- c("deme 1", "deme 2", "deme 3")
tree <- rotateConstr(tree, constraint = rev(cons))
plot(tree)
# bionj tree
tree <- bionj(distmat)
tree$tip.label <- as.character(c("deme 1", "deme 2", "deme 3"))
plot(tree)
pdf(width=14, height=14, file=paste(inp, "_tree.pdf", sep=""))
plot(tree, type="unrooted", cex=.4, lab4ut='axial', show.node.label=T)
dev.off()
pdf(width=2, height=2, file=paste(inp, "_tree.pdf", sep=""))
plot(tree, type="unrooted", cex=.4, lab4ut='axial', show.node.label=T)
dev.off()
pdf(width=4, height=4, file=paste(inp, "_tree.pdf", sep=""))
plot(tree, type="unrooted", cex=.4, lab4ut='axial', show.node.label=T)
dev.off()
plot(tree, type="cladogram", show.node.label=T)
plot(tree, type="fan", show.node.label=T)
library(data.table)
library(gtools)
library(ggplot2)
library(summarySE)
library(cowplot)
sorted_file_list <- function(path, pattern){
f <- list.files(path=path, pattern=pattern, full.names=TRUE, recursive=TRUE)
f2 <- gsub(".", " ", f, fixed=TRUE)
f2_sort <- mixedsort(f2)
f2_sort_rep <- gsub(" ", ".", f2_sort, fixed=TRUE)
return(f2_sort_rep)
}
extract_info <- function(file, rl){
f_spl <- gsub("[_/.]", " ", file)
f_spl2 <- trimws(gsub(pattern='[A-Za-z]', "", f_spl, perl=TRUE))
f_l <- as.numeric(strsplit(f_spl2, split=' ')[[1]])
f_vec <- f_l[!sapply(f_l, is.na)][-(1:1)]
len <- f_vec[4] - f_vec[3]
f <- fread(file)
f_int_del <- f[!is.na(f$int_del), c(3,9,12)]
if (nrow(f_int_del) != 0){
int_del <- as.numeric(strsplit(f_int_del$int_del, ":")[[1]])
start <- int_del[1]
stop <- int_del[2]
obs_cov <- int_del[3]
#len <- (stop - start) - 1
mean_cov <- mean(f[(start + 1) :stop, cov])
} else {
obs_cov <- 0
mean_cov <- 1
}
obs <- obs_cov / (obs_cov + mean_cov)
sim <- f_vec[2] / 100
file_res <- c(rl, sim, obs, len, obs_cov)
return(file_res)
}
process_data <- function(path, rl){
file_list <- sorted_file_list(path=path, pattern=".DOC5$")
M <- t(sapply(file_list, extract_info, rl))
frame <- data.frame(M)
names(frame) <- c('rl', 'sim', 'obs', 'len', 'obs_gap_cov')
return(frame)
}
min_resid <- function(data, par){
# find parameter combo to minimize residual sum of squares
# intercept and slope fixed to prediction
with(data, sum((0 + 1 * data[,"sim"] - (data[,"obs"]^par) )^2))
}
corr_fac <- function(frame){
res <- optim(par=0, fn=min_resid, data=frame, method="Brent", lower=0, upper=5)
return(res$par)
}
int_del80 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/67_int_del_valid_80/', rl = 80)
int_del100 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/68_int_del_valid_100/', rl = 100)
int_del175 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/75_int_del_re_175/', rl = 175)
int_del250 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/69_int_del_valid_250/', rl = 250)
int_del500 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/73_int_del_re_500/', rl = 500)
int_del1000 <- process_data(path = '~/Desktop/vetgrid/consensus_te/paper_deviaTE/validation/VALIDATION_INTDEL/74_int_del_re_1000/', rl = 1000)
str(int_del80)
corr_fac(frame=int_del80)
corr_fac(frame=int_del100)
setwd("~/Desktop/vetgrid/consensus_te/15_validation_sims/divergence/")
inp_arg <- 'pgds/0_div.pgd.fa1.fastq.DOC5'
inp_arg <- 'pgds/0_div.pgd.fa1.fastq.DOC5'
out_arg <- 'test.pdf'
axis_arg <- FALSE
fontsize <- 14
out_format <- 'pdf'
fam_name <- function(df){
# returns the TEfamily for a sample
return(as.character(df$TEfam[1]))
}
fam_len <- function(df){
# return the length of the TEfam from one sample
return(nrow(df))
}
snp_positions <- function(df){
# get snp positions
snps <- subset(df, snp==TRUE | refsnp==TRUE, sel='pos')
snp_pos <- as.numeric(snps$pos) + 1
return(snp_pos)
}
ref_allele <- function(snp_index, refbases, len){
if (refbases[snp_index] == 'A'){return(snp_index)
} else if (refbases[snp_index] == 'C'){return(snp_index + len)
} else if (refbases[snp_index] == 'G'){return(snp_index + 2*len)
} else {return(snp_index + 3*len)}
}
snp_frame <- function(df){
# results in a df with 4 * length and 5 cols
# concatenate the base coverage and create factor columns
l <- fam_len(df)
counts_col <- c(df$A, df$C, df$G, df$T)
pos_col <- rep(1:l, 4) # change 1 to 0 and l to l-1
fam_col <- rep(df$TEfam, 4)
sample_col <- rep(df$sample_id, 4)
base_col <- c(rep('A', l), rep('C', l), rep('G', l), rep('T', l))
polys <- snp_positions(df)
# remove reference allele from SNPs
polys_ref_indices <- sapply(polys, ref_allele, df$refbase, l)
polys_ref_indices_sorted <- sort(as.numeric(polys_ref_indices))
base_col[polys_ref_indices_sorted] <- 'X' #multi-indexing
lf <- data.frame(fam_col, sample_col, base_col, pos_col, counts_col)
snps <- subset(lf, pos_col %in% polys)
snps_noref <- subset(snps, base_col != 'X')
return(snps_noref)
}
base_plot <- function(snps, sample){
# creates base plot object
famlen <- max(sample$pos) + 1
lim <- ceiling(famlen/50)
plot_title <- paste(sample$TEfam[1], sample$sample_id[1])
# order of levels defines the order of stacked bars; snp at bottom
snps$base_col <- factor(snps$base_col, levels=c('A','C','G','T'))
# polygon total coverage
pg <- data.table(px=c(sample$pos, rev(sample$pos)),
py=c(sample$coverage, rep(0,length(sample$coverage))))
# polygon hq coverage
pg_hq <- data.table(px=c(sample$pos, rev(sample$pos)),
py=c(sample$hq_coverage, rep(0,length(sample$hq_coverage))))
baseplot <- ggplot() +
geom_polygon(data=pg, aes(x=px, y=py), fill='lightgrey', color='lightgrey') +
geom_polygon(data=pg_hq, aes(x=px, y=py), fill='grey', color='grey') +
geom_bar(data=snps, aes(x=pos_col, y=counts_col, fill=base_col), stat='identity', width=3) +
labs(fill='') +
ylab('') +
xlab('') +
ggtitle(plot_title) +
scale_x_continuous(limits=c(-lim, famlen+lim)) +
scale_fill_manual(values=base_colors, breaks=c('A','C','G','T', 'in', 'del')) +
theme_minimal(base_size=fontsize) +
theme(
legend.position='none',
legend.background=element_blank(),
legend.key=element_blank(),
plot.title = element_text(hjust = 0.5)
)
# overwrite clipping of annotations
#baseplot <- ggplot_gtable(ggplot_build(baseplot))
#baseplot$layout$clip[baseplot$layout$name == "panel"] <- "off"
return(list(baseplot))
}
make_legend <- function(){
# create a fake dataframe to produce a consistent legend for all plots
fake_df <- data.table(base_col=c('A', 'C', 'G', 'T'), counts_col=rep(1, 4), pos_col=1:4)
legplot <- ggplot(fake_df) +
geom_bar(aes(x=pos_col, y=counts_col, fill=base_col), stat='identity', width=1) +
labs(fill='') +
scale_fill_manual(values=base_colors, breaks=c('A','C','G','T', 'in', 'del')) +
# theme_minimal(base_size=fontsize) +
theme(legend.position='bottom') +
guides(fill = guide_legend(nrow = 1))
legplot_list <- list(legplot)
del <- list(data.frame(x=c(1), xend=c(2), y=c(0), yend=c(1), fam_col='t', sample_col='s', fac='del'))
ins <- list(data.frame(x=c(1), xend=c(2), y=c(0), yend=c(1), fam_col='t', sample_col='s', fac='in'))
legplot_list <- mapply(add_rect, p=legplot_list, coords=ins)
legplot_list <- mapply(add_rect, p=legplot_list, coords=del)
legend <- get_legend(legplot_list[[1]])
return(legend)
}
int_del_data <- function(df){
# generate coordinates to plot internal deletions, size ~ counts
feat_df <- subset(df, int_del != 'NA', sel=c('TEfam', 'sample_id', 'int_del'))
if (nrow(feat_df) == 0){
return(data.frame(x=0, xend=1, y=0, yend=0, size=0))
}
# split at those positions that contain multiple features
# then split again to get start, end and count
feats <- unlist(strsplit(feat_df$int_del, ','))
feat_list <- strsplit(feats, ':')
xsrt <- as.numeric(lapply(feat_list, '[[', 1))
xend <- as.numeric(lapply(feat_list, '[[', 2))
size <- as.numeric(lapply(feat_list, '[[', 3))
ysrt <- lapply(xsrt, function(i){if (i>5){
mean(df$coverage[(i-5):i])}
else {df$coverage[i]} })
yend <- lapply(xend, function(i){mean(df$coverage[i:(i+5)])})
# add factors to plot in correct facet
fam <- rep(feat_df$TEfam[1], length(xsrt))
sample <- rep(feat_df$sample_id[1], length(xsrt))
return(data.frame(x=xsrt, y=as.numeric(ysrt), xend=xend, yend=as.numeric(yend),
size=size, fam_col=fam, sample_col=sample))
}
insertion_data <- function(df){
# coordinates for plotting insertions
ins_df <- subset(df, insertion != 'NA', sel=c('TEfam', 'sample_id', 'insertion'))
if (nrow(ins_df) == 0){
return(data.frame(x=0, xend=1, y=0, yend=1, fac=NA))
}
# split multiple insertions at one site
ins <- unlist(strsplit(ins_df$insertion, ','))
ins_list <- strsplit(ins, ':')
xsrt <- as.numeric(lapply(ins_list, '[[', 1))
xend <- as.numeric(lapply(ins_list, '[[', 2))
yend <- as.numeric(lapply(ins_list, '[[', 3))
ysrt <- 0
# add factors to plot in correct facet
fam <- rep(ins_df$TEfam[1], length(xsrt))
sample <- rep(ins_df$sample_id[1], length(xsrt))
fac <- rep('in', length(xsrt))
return(data.frame(x=xsrt, xend=xend, y=ysrt, yend=yend, fam_col=fam, sample_col=sample, fac=fac))
}
deletion_data <- function(df){
# coordinates for plotting deletions
del_df <- subset(df, deletion != 'NA', sel=c('TEfam', 'sample_id', 'deletion'))
if (nrow(del_df) == 0){
return(data.frame(x=0, xend=1, y=0, yend=1, fac=NA))
}
# split multiple insertions at one site
dels <- unlist(strsplit(del_df$deletion, ','))
dels_list <- strsplit(dels, ':')
xsrt <- as.numeric(lapply(dels_list, '[[', 1))
xend <- as.numeric(lapply(dels_list, '[[', 2))
yend <- as.numeric(lapply(dels_list, '[[', 3))
ysrt <- 0
# add factors to plot in correct facet
fam <- rep(del_df$TEfam[1], length(xsrt))
sample <- rep(del_df$sample_id[1], length(xsrt))
fac <- rep('del', length(xsrt))
return(data.frame(x=xsrt, xend=xend, y=ysrt, yend=yend, fam_col=fam, sample_col=sample, fac=fac))
}
truncation_data <- function(df){
# generate coordinates to plot truncations
tl_df <- subset(df, truncation_left != 0, sel=c('pos', 'TEfam', 'sample_id', 'truncation_left'))
tr_df <- subset(df, truncation_right != 0, sel=c('pos', 'TEfam', 'sample_id', 'truncation_right'))
# remove truncs at pos 0 and end, only if trunc frame is not empty
if (nrow(tl_df) != 0){
if (tl_df[1,]$pos == 0){tl_df <- tl_df[-1,]}
}
if (nrow(tr_df) != 0){
if (tr_df[nrow(tr_df),]$pos == nrow(df) - 1){tr_df <- tr_df[-nrow(tr_df),]}
}
l_xend <- as.numeric(tl_df$pos) + 1
l_xsrt <- l_xend - (fam_len(df)/50)
l_yend <- as.numeric(lapply(l_xend, function(i){df$coverage[i+1]}))
l_ysrt <- as.numeric(l_yend) + (max(df$coverage)/5)
l_alpha <- as.numeric(tl_df$truncation_left)
r_xsrt <- as.numeric(tr_df$pos)
r_xend <- r_xsrt + (fam_len(df)/50)
r_ysrt <- as.numeric(lapply(r_xsrt, function(i){df$coverage[i]}))
r_yend <- as.numeric(r_ysrt) + (max(df$coverage)/5)
r_alpha <- as.numeric(tr_df$truncation_right)
left_truncs <- data.frame(x=l_xsrt, xend=l_xend, y=l_ysrt, yend=l_yend, alpha=l_alpha)
right_truncs <- data.frame(x=r_xsrt, xend=r_xend, y=r_ysrt, yend=r_yend, alpha=r_alpha)
truncs <- rbind(left_truncs, right_truncs)
# add factors to plot in correct facet
fam_col <- rep(tl_df$TEfam[1], length(truncs$x))
sample_col <- rep(tl_df$sample_id[1], length(truncs$x))
truncs <- cbind(truncs, fam_col, sample_col)
return(truncs)
}
add_curve <- function(p, coords){
# takes a plot and a frame of int_dels
# and adds the curves, need to return the new plot as list
q <- p + geom_curve(data=coords, mapping=aes(x=x, y=y, xend=xend, yend=yend,
size=size), curvature=-0.2, ncp=10, show.legend=FALSE) +
scale_size(range = sizerange)
return(list(q))
}
add_rect <- function(p, coords){
# takes a plot and frame of coords
# plots insertions or deletions
q <- p + geom_rect(data=coords, mapping=aes(xmin=x, xmax=xend,
ymin=y, ymax=yend, fill=fac))
return(list(q))
}
add_segment <- function(p, coords){
# takes a plot and frame of truncations
# adds the angled segments and alpha as aes
q <- p + geom_segment(data=coords, mapping=aes(x=x, y=y, xend=xend, yend=yend,
alpha=alpha), lty='dashed', show.legend=FALSE) +
scale_alpha(range = alpharange)
return(list(q))
}
polygons <- function(a, fam_len){
f <- 0:fam_len
px <- c(f, rev(f))
py <- rep(0, length(f))
py[a$pos] <- 1
py <- c(py, rep(0, length(f)))
rects <- data.table(px=px, py=py, group=rep(a$annotation[1], length(px)))
return(rects)
}
plot_anno <- function(df){
famlen <- max(df$pos) + 1
lim <- ceiling(famlen/50)
anno_df <- subset(df, !(annotation %in% c(NA, 'intergenic')), sel=c('pos', 'annotation'))
if (nrow(anno_df) != 0 ){
anno_df$annotation <- as.character(anno_df$annotation) # cast vector to string
annos <- split(anno_df, f=anno_df$annotation) # split by annotation type
annotation_polygons <- do.call(rbind, lapply(annos, polygons, fam_len=famlen)) # call polygons and fuse to one frame
ann <- ggplot() +
geom_polygon(data=annotation_polygons, aes(x=px, y=py, fill=group)) +
scale_fill_grey() +
labs(fill='') +
xlab('') +
ylab('') +
scale_x_continuous(limits=c(-lim, famlen+lim)) +
theme_void(base_size=fontsize) +
theme(
legend.position='bottom',
legend.key=element_blank(),
legend.background=element_blank(),
axis.text = element_text(size = rel(0.8), colour = 'grey50'),
axis.text.x = element_text(color = 'grey50', angle=0),
axis.text.y = element_blank(),
axis.ticks.x = element_line(color= 'grey50'),
axis.line.x = element_line(color='grey50')
)
} else {ann <- ggplot(data.frame()) + geom_blank()}
return(ann)
}
find_max <- function(df_list, var, ff){
# returns the maximum coverage per family
maxima <- sapply(df_list, function(df){suppressWarnings(max(df[,var]))})
# remove -INF if one sample is empty
maxima[maxima==-Inf] <- 0
# make a frame with maxima and family factor, split by factor
maxima_list <- split(data.table(maxima, ff), ff)
max_per_fam <- as.numeric(lapply(maxima_list, function(df){max(df$maxima)}))
max_per_fam[max_per_fam==0] <- 1
return(max_per_fam)
}
rep<-"http://cran.rstudio.com/"
if (!suppressMessages(suppressWarnings(require(ggplot2)))) install.packages('ggplot2', repos=rep)
require(ggplot2)
t <- require(ggplot2)
t
library(ggplot2)
t <- library(ggplot2)
t
citation("ade4")
class()
cor.test()
?cor.test()
?cor.test(c(3,2,1), c(4,5,6))
cor.test(c(3,2,1), c(4,5,6))
library(factoextra)
library(ggplot2)
library(ggrepel)
library(rgdal)
library(ggmap)
# nacline
inp <- "~/Desktop/vetgrid/consensus_te/08_na_PCA/na.PPI251.freqtable"
meta_file <- "~/Desktop/vetgrid/consensus_te/08_na_PCA/na_root"
# read the data
freq_table <- read.csv(inp, sep=' ', row.names=1)
freq <- as.data.frame(t(freq_table), row.names=names(freq_table), names=row.names(freq_table))
meta <- read.csv(meta_file, sep=' ')
meta <- meta[order(meta$SRR),]
# variance and variance explained by each freq
freq_vars <- apply(freq, 2, var)
freq_vars_ex <- freq_vars/sum(freq_vars)
# compute new set of variables - PCs
freq_pca <- prcomp(freq, retx=T, scale=T)
# make new frame from Principal Components
freq_trans <- freq_pca$x #rotated variables
PCA <- as.data.frame(freq_trans)
# VARIANCE
# variance explained by PCs
vars_trans <- apply(freq_trans, 2, var)
var_ex <- as.data.frame(vars_trans/sum(vars_trans))
var_ex <- cbind(var_ex, row.names(var_ex))
names(var_ex) <- c("var", "pc")
var_ex$pc <- factor(var_ex$pc, levels = var_ex$pc[order(var_ex$var, decreasing = T)])
# plot about how much var PCs explain
q <- ggplot(var_ex[1:5,], aes(x=pc, y=var*100)) +
geom_bar(stat="identity", fill="darkred") +
ylab('% of total variance') +
xlab('') +
theme_minimal()
# INDIVIDUALS
# add first two PCs to the meta table
metaPCA <- cbind(meta, PCA[,1:2])
ind_plot <- ggplot(data=metaPCA, aes(x=-PC2, y=PC1, color=Latitude)) + #swap geo dir
geom_point() +
scale_color_gradient(low='lightpink', high='darkred') +
geom_text_repel(aes(label=metaPCA$Country), size=3, color="darkgrey") +
ylab(paste("PC1 (", round((var_ex[1,]$var*100),2), "%)", sep="")) +
xlab(paste("PC2 (", round((var_ex[2,]$var*100),2), "%)", sep="")) +
geom_hline(yintercept = 0, linetype="dashed", size=0.1) +
geom_vline(xintercept = 0, linetype="dashed", size=0.1) +
theme_minimal()
# VARIABLES
var <- get_pca_var(freq_pca)
var_cont <- as.data.frame(var$contrib)
var_cont_PC1 <- var_cont[order(var_cont$Dim.1, decreasing=TRUE),]
var_PC1 <- as.data.frame(cbind(row.names(var_cont_PC1), var_cont_PC1$Dim.1), stringsAsFactors = FALSE)
var_PC1$V2 <- as.numeric(var_PC1$V2)
df <- var_PC1
pos <- df$V1 #for bar-order
contrib <- ggplot(df, aes(y=V1, x=V2)) +
geom_point(color="darkred") +
scale_y_discrete(limits = rev(pos)) +
xlab('contribution to PC1 (%)') +
ylab('deletion variant') +
theme_minimal() +
theme(axis.text.y = element_text(size=8, angle = 45, hjust = 1),
panel.grid.minor.x = element_blank())
df
library(factoextra)
library(ggplot2)
library(ggrepel)
library(rgdal)
library(ggmap)
# droseu
inp <- "~/Desktop/vetgrid/consensus_te/05_droseu_PCA/droseu.PPI251.freqtable"
meta_file <- "~/Desktop/vetgrid/consensus_te/05_droseu_PCA/droseu_root"
# read the data
freq_table <- read.csv(inp, sep=' ', row.names=1)
freq <- as.data.frame(t(freq_table), row.names=names(freq_table), names=row.names(freq_table))
meta <- read.csv(meta_file, sep=' ')
meta <- meta[order(meta$SRR),]
# variance and variance explained by each freq
freq_vars <- apply(freq, 2, var)
freq_vars_ex <- freq_vars/sum(freq_vars)
# compute new set of variables - PCs
freq_pca <- prcomp(freq, retx=T, scale=T)
# make new frame from Principal Components
freq_trans <- freq_pca$x #rotated variables
PCA <- as.data.frame(freq_trans)
# VARIANCE
# variance explained by PCs
vars_trans <- apply(freq_trans, 2, var)
var_ex <- as.data.frame(vars_trans/sum(vars_trans))
var_ex <- cbind(var_ex, row.names(var_ex))
names(var_ex) <- c("var", "pc")
var_ex$pc <- factor(var_ex$pc, levels = var_ex$pc[order(var_ex$var, decreasing = T)])
# plot about how much var PCs explain
q <- ggplot(var_ex[1:6,], aes(x=pc, y=var*100)) +
geom_bar(stat="identity", fill="darkblue") +
ylab('% of total variance') +
xlab('') +
theme_minimal()
# INDIVIDUALS
# add first two PCs to the meta table
metaPCA <- cbind(meta, PCA[,1:2])
var_ex
var_ex[1:6,1]
sum(var_ex[1:6,1])
